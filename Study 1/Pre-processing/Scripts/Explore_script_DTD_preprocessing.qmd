---
title: "LISS data preprocessing"
format: html
editor: visual
---

## Introduction and Packages

In this document, the extracted data of the WhatsApp DDPs is parsed and linked to the other data sources. All donations of split 1 and split 2 were already combined in a single data folder, making the parsing process much easier.

```{r}
#| messages: false
#| warning: false

# The following packages were used in this document
library(plyr)
library(tidyverse) # general wrangling
library(rjson) # parse data
library(knitr) # for tables
library(foreign) # for spss questionnaire files
```

## Parcing Account Information

The following code checks and parses all packages that contain account information. Right now, there are two types of packages that could not be parsed: <br> 1. When a participant declined the donation. However, for these DDPs it's impossible to tell whether they would contain account or chat information? <br> 2. When an error occurred and no information could be extracted. A variable is made to indicate these paricipants

```{r}
# List the files
file_list <- list.files(".../DTD-donation/Study 1/Data/Pakketjes split 1 & 2/")

# Create the paths
main_path <- ".../DTD-donation/Study 1/Data/Pakketjes split 1 & 2/"


paths <- paste(main_path, file_list, sep = "")


# data save object
df <- as.data.frame(matrix(ncol = 5))
colnames(df) <- c("pers_id", "groepen", "contacten", "AccountPackageID", "Error_in_extraction")


# parse all the objects
for(i in 1:length(paths)){
  # parse first object
  data <- fromJSON(file = paths[i])

  # parse respondent id
  if(exists("_respondent", data)){
  pers_id <- data$`_respondent`}
  
  # parse data; exclude logs that declined
  if(exists("qu_1", data) & data[[1]] != "{ 'message': 'declined'}"){
  data2 <- fromJSON(data$qu_1)
  
  # parse account info; exclude logs where no data could be extracted
  if(data2[[1]]$id == "WhatsApp account info" & !grepl("We konden geen", data2[[1]]$data_frame)){
  data_acc <- fromJSON(data2[[1]]$data_frame)
  
  # obtain account info
  acc_info <- cbind(pers_id, data_acc$`Aantal groepen`$`0`, data_acc$`Aantal contacten`$`0`, file_list[i], "No")
  colnames(acc_info) <- c("pers_id", "groepen", "contacten", "AccountPackageID", "Error_in_extraction")
  
  # bind with df
  df <- rbind(df, acc_info)}
    
    # Make extra variable for error in extraction and add to df as well
    if(grepl("We konden geen", data2[[1]]$data_frame)){
      error <- "Yes"
      acc_info2 <- cbind(pers_id, NA, NA, file_list[i], error)
      colnames(acc_info2) <- c("pers_id", "groepen", "contacten", "AccountPackageID", "Error_in_extraction")
      
      df <- rbind(df, acc_info2)
      }
    }
}

# Delete unneeded row
df <- df[-1,]
rownames(df) <- 1:nrow(df)

# number of donations: 319
nrow(df)
```

##### Illustration of final data frame

```{r}
#| message: false
#| echo: false
kable(head(df))
```

#### Save the data

```{r}
write.csv(df, ".../DTD-donation/Study 1/Data/parsed_contacts.csv")
```



